{"version":3,"sources":["components/PatientInfo/PatientInfo.js","App.js","components/Launch.js","serviceWorker.js","index.js"],"names":["PatientInfo","className","Object","keys","this","props","patient","map","value","values","toString","React","Component","App","retreivePhone","Number","Type","use","retreiveAddress","line","city","state","postalCode","country","Street1","Street2","City","State","PostalCode","Country","retreiveContacts","relationship","name","telecom","address","Email","Name","text","Phones","RelationShip","Address","getPatientDetails","find","v","Gender","gender","Addresses","Active","active","BirthDate","birthDate","Phone","EmergencyContacts","contact","smartKey","console","log","SMART","ready","then","client","Promise","all","read","meds","error","catch","window","location","href","FHIR","oauth2","authorize","Boolean","hostname","match","params","fromEntries","replace","split","ReactDOM","render","filter","length","Launch","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.3c7d1b49.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PatientInfo extends React.Component {\r\n\r\n    render() {\r\n        return <div className=\"container patient-info\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr className=\"row\">\r\n                                {Object.keys(this.props.patient).map( (value) => (<th className=\"col\">{value}</th>) )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr className=\"row\">\r\n                                {Object.values(this.props.patient).map( (value) => (<td className=\"col\">{value.toString()}</td>))}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>;\r\n    }\r\n}\r\n\r\nexport default PatientInfo;\r\n","import React from 'react';\nimport './App.css';\nimport { oauth2 as SMART } from 'fhirclient';\nimport PatientInfo from './components/PatientInfo/PatientInfo';\n\nclass App extends React.Component {\n\n  smartKey;\n  // _storageData = null;\n  // get StorageData() {\n  //   this._storageData = this._storageData == null ? JSON.parse(sessionStorage[this.smartKey]) : this._storageData;\n  //   return this._storageData;\n  // }\n\n  constructor (props) {\n    super(props);\n\n    this.smartKey = props.smartKey;\n\n    console.log(\"props\", props);\n    console.log(\"smart\", SMART);\n    // console.log(\"storage\", sessionStorage);\n    // console.log(\"storage\", this.StorageData);\n    // console.log(\"smartKey\", this.smartKey);\n\n    SMART.ready()\n    .then(client => {\n\n      console.log(client);\n      return Promise.all([\n        client.patient.read(),\n        // client.request(`/MedicationRequest?patient=${client.patient.id}`, {\n        //     resolveReferences: \"medicationReference\",\n        //     pageLimit: 0,\n        //     flat: true\n        // })\n      ]);\n    })\n    .then(([patient, meds]) => {\n        console.log(\"patient\", patient);\n        console.log(\"meds\", meds);\n        this.state = { \n          patient: this.getPatientDetails(patient) \n        };\n        //this.meds = meds;\n      },\n      error => {\n        console.error(error);\n    })\n    .catch(console.error);\n  } \n\n  render () {\n    return <div className=\"App\">\n            Redirected to here\n            {window.location.href}\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\n            <PatientInfo patient={this.patient} />\n          </div>;\n  }\n\n  \n  retreivePhone = ({value, use}) => ({ Number: value, Type: use });\n  retreiveAddress = ({use, line, city, state, postalCode, country}) => ({ Street1: line ? line[0] : \"\", Street2: line ? line[1] : \"\", City: city, State: state, PostalCode: postalCode, Country: country, Type: use });\n  retreiveContacts = ({relationship, name, telecom, address}) => ({ Email: \"\", Name: name.text, Phones: telecom.map(this.retreivePhone), RelationShip: relationship ? relationship[0].text : \"\", Address: address ? this.retreiveAddress(address) : \"\" });\n\n  getPatientDetails = (patient) => ({ \n      Name: patient.name.find(v => v.use == \"official\").text,\n      Gender: patient.gender,\n      Addresses: patient.address.map(this.retreiveAddress),\n      Active: patient.active,\n      BirthDate: patient.birthDate,\n      Phone: patient.telecom.map(this.retreivePhone),\n      EmergencyContacts: patient.contact.map(this.retreiveContacts)\n    });\n\n}\n\nexport default App;\n","import React from 'react';\r\nimport FHIR from 'fhirclient';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        console.log(FHIR);\r\n\r\n        FHIR.oauth2.authorize({\r\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a',\r\n            'scope':  'patient/Patient.read patient/MedicationRequest.read launch online_access openid profile'\r\n        });\r\n    } \r\n\r\n\r\n    render () {\r\n        return <div className=\"App\">\r\n                {window.location.href}\r\n                'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\r\n            </div>;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Launch from './components/Launch';\nimport * as serviceWorker from './serviceWorker';\nimport { oauth2 as SMART } from \"fhirclient\";\n\nconst params = Object.fromEntries(window.location.href.replace(/.*\\?/, \"\").split(\"&\").map(v => v.split(\"=\")));\nconst launchContext = () => window.location.href.replace(/.*\\?/, \"\").split(\"&\").filter(v => v.split(\"=\")[0] == \"iss\").length > 0;\n\nReactDOM.render(launchContext() ? <Launch  /> : <App smartKey={params.state}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}