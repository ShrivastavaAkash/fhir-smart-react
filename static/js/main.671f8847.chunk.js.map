{"version":3,"sources":["App.js","components/Launch.js","serviceWorker.js","index.js"],"names":["App","props","console","log","FHIR","oauth2","ready","then","client","request","catch","error","className","window","location","href","React","Component","authorize","Boolean","hostname","match","ReactDOM","render","replace","split","filter","v","length","Launch","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"4OAyBeA,E,YAnBb,WAAaC,GAAQ,IAAD,6BAClB,4CAAMA,IACNC,QAAQC,IAAIC,KAEZA,IAAKC,OAAOC,QACXC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,QAAQ,eAC9BF,KAAKL,QAAQC,KACbO,MAAMR,QAAQS,OAPG,E,sEAWlB,OAAO,yBAAKC,UAAU,OAAf,qBAEEC,OAAOC,SAASC,KAFlB,2D,GAbOC,IAAMC,WCmBTjB,E,YAlBb,WAAaC,GAAQ,IAAD,6BAClB,4CAAMA,IACNC,QAAQC,IAAIC,KAEZA,IAAKC,OAAOa,UAAU,CACpB,UAAa,uCACb,MAAU,iCANM,E,sEAWlB,OAAO,yBAAKN,UAAU,OACbC,OAAOC,SAASC,KADlB,2D,GAbOC,IAAMC,WCSJE,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCTNC,IAASC,OAFmBV,OAAOC,SAASC,KAAKS,QAAQ,OAAQ,IAAIC,MAAM,KAAKC,QAAO,SAAAC,GAAC,MAAuB,OAAnBA,EAAEF,MAAM,KAAK,MAAaG,OAAS,EAE7F,kBAACC,EAAD,MAAa,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H1E,kBAAmBC,WACrBA,UAAUC,cAAc3B,MAAMC,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.671f8847.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport FHIR from 'fhirclient';\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super(props);\n    console.log(FHIR);\n\n    FHIR.oauth2.ready()\n    .then(client => client.request(\"metadata\"))\n    .then(console.log)\n    .catch(console.error);\n  } \n\n  render () {\n    return <div className=\"App\">\n            Redirected to here\n            {window.location.href}\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\n          </div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport FHIR from 'fhirclient';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    console.log(FHIR);\r\n\r\n    FHIR.oauth2.authorize({\r\n      'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a',\r\n      'scope':  'patient/Patient.read patient'\r\n    });\r\n  } \r\n\r\n  render () {\r\n    return <div className=\"App\">\r\n            {window.location.href}\r\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\r\n          </div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Launch from './components/Launch';\nimport * as serviceWorker from './serviceWorker';\n\nconst launchContext = () => window.location.href.replace(/.*\\?/, \"\").split(\"&\").filter(v => v.split(\"=\")[0] == \"iss\").length > 0;\n\nReactDOM.render(launchContext() ? <Launch /> : <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}