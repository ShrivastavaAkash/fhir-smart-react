{"version":3,"sources":["components/PatientInfo/PatientInfo.js","App.js","components/Launch.js","serviceWorker.js","index.js"],"names":["PatientInfo","console","log","this","props","patient","className","class","Name","Gender","Array","isArray","Addresses","map","v","Object","values","filter","a","join","Active","BirthDate","Phone","p","Number","Type","EmergencyContacts","RelationShip","React","Component","App","retreivePhone","value","use","retreiveAddress","line","city","state","postalCode","country","Street1","Street2","City","State","PostalCode","Country","retreiveContacts","relationship","name","telecom","address","Email","text","Phones","Address","getPatientDetails","find","gender","active","birthDate","contact","updatePatient","bind","window","UpdatePatient","smartKey","JSON","parse","SMART","ready","then","client","Promise","all","read","meds","error","catch","setState","FHIR","oauth2","authorize","location","href","Boolean","hostname","match","params","fromEntries","replace","split","ReactDOM","render","length","Launch","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.8a85b87c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass PatientInfo extends React.Component {\r\n  render() {\r\n    console.log(\"patient Info \", this.props.patient);\r\n\r\n    return (\r\n      <div className=\"container-fluid patient-info\">\r\n        <div className=\"row col-lg-5 col-md-12\">\r\n          <h4 className=\"col-lg-12 p-2 bg-secondary text-light mb-0 border-0 mt-2\">\r\n            Patient Information\r\n          </h4>\r\n          <ul className=\"col p-0 m-0\">\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">Name</span>\r\n              {this.props.patient.Name}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">Gender</span>\r\n              {this.props.patient.Gender}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">Addresses</span>\r\n              {Array.isArray(this.props.patient.Addresses)\r\n                ? this.props.patient.Addresses.map(v =>\r\n                    Object.values(v)\r\n                      .filter(a => a)\r\n                      .join(\", \")\r\n                  )\r\n                : \"N/A\"}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">Active</span>\r\n              {this.props.patient.Active ? \"Yes\" : \"No\"}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">\r\n                Birth Date\r\n              </span>\r\n              {this.props.patient.BirthDate}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">Phone</span>\r\n              {Array.isArray(this.props.patient.Phone)\r\n                ? this.props.patient.Phone.map(\r\n                    p => p.Number + \" (\" + p.Type + \")\"\r\n                  ).join(<br />)\r\n                : \"N/A\"}\r\n            </li>\r\n            <li className=\"row p-3 border text-left no-gutters\">\r\n              <span class=\"col-lg-3 text-left font-weight-bold\">\r\n                Emergency Contacts\r\n              </span>\r\n              {Array.isArray(this.props.patient.EmergencyContacts)\r\n                ? this.props.patient.EmergencyContacts.map(\r\n                    v => v.Name + \" (\" + v.RelationShip + \")\"\r\n                  ).join(<br />)\r\n                : \"N/A\"}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PatientInfo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { oauth2 as SMART } from \"fhirclient\";\nimport PatientInfo from \"./components/PatientInfo/PatientInfo\";\n\nclass App extends React.Component {\n  smartKey;\n\n  constructor(props) {\n    super(props);\n\n    this.updatePatient.bind(this);\n    window.UpdatePatient = this.updatePatient;\n\n    if (props.smartKey == null) {\n      this.state = {\n        patient: this.getPatientDetails(\n          JSON.parse(\n            `{\"resourceType\":\"Patient\",\"id\":\"4342010\",\"meta\":{\"versionId\":\"25\",\"lastUpdated\":\"2019-07-22T08:19:55.000Z\"},\"text\":{\"status\":\"generated\",\"div\":\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><p><b>Patient</b></p><p><b>Status</b>: Active</p><p><b>Name</b>: SMART, JOE</p><p><b>DOB</b>: Apr 29, 1976</p><p><b>Administrative Gender</b>: Male</p><p><b>Marital Status</b>: Married</p></div>\"},\"extension\":[{\"url\":\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\"extension\":[{\"url\":\"ombCategory\",\"valueCoding\":{\"system\":\"urn:oid:2.16.840.1.113883.6.238\",\"code\":\"2186-5\",\"display\":\"Non Hispanic or Latino\",\"userSelected\":false}},{\"url\":\"text\",\"valueString\":\"Not Hispanic or Latino\"}]}],\"identifier\":[{\"id\":\"CI-6810251-0\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"10\",\"display\":\"MRN\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"MR\",\"display\":\"Medical record number\",\"userSelected\":false}],\"text\":\"MRN\"},\"system\":\"urn:oid:1.1.1.1.1.1\",\"value\":\"10002702\",\"period\":{\"start\":\"2016-06-22T21:06:58.000Z\"}},{\"id\":\"CI-8934220-2\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"670843\",\"display\":\"Messaging\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"U\",\"display\":\"Unspecified identifier\",\"userSelected\":false}],\"text\":\"Messaging\"},\"system\":\"urn:oid:2.16.840.1.113883.3.13.8\",\"value\":\"FB4A2EB3BCB34B208FEEAFA27A7BD252\",\"period\":{\"start\":\"2018-09-13T16:44:32.000Z\"}},{\"id\":\"CI-7476209-3\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"36322657\",\"display\":\"Federated Person Principal\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"AN\",\"display\":\"Account number\",\"userSelected\":false}],\"text\":\"Federated Person Principal\"},\"system\":\"urn:oid:2.16.840.1.113883.3.13.6\",\"value\":\"URN:CERNER:IDENTITY-FEDERATION:REALM:687F29DD-69DD-4DE5-ACB1-FD8A2241EF3A:PRINCIPAL:UY4572B79XK\",\"period\":{\"start\":\"2016-01-01T10:00:00.000Z\"}},{\"id\":\"CI-7476210-4\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"36322657\",\"display\":\"Federated Person Principal\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"AN\",\"display\":\"Account number\",\"userSelected\":false}],\"text\":\"Federated Person Principal\"},\"system\":\"urn:oid:2.16.840.1.113883.3.13.6\",\"value\":\"urn:cerner:identity-federation:realm:687f29dd-69dd-4de5-acb1-fd8a2241ef3a:principal:UY4572B79XK\",\"period\":{\"start\":\"2016-01-01T10:00:00.000Z\"}},{\"id\":\"CI-9064212-5\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"36322657\",\"display\":\"Federated Person Principal\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"AN\",\"display\":\"Account number\",\"userSelected\":false}],\"text\":\"Federated Person Principal\"},\"system\":\"urn:oid:2.16.840.1.113883.3.13.6\",\"value\":\"URN:CERNER:IDENTITY-FEDERATION:REALM:2E882EFF-FA72-4882-ADC8-A685F7D2BFA6:PRINCIPAL:XYZ1234\"},{\"id\":\"CI-9070210-6\",\"use\":\"usual\",\"type\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/4\",\"code\":\"36322657\",\"display\":\"Federated Person Principal\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"AN\",\"display\":\"Account number\",\"userSelected\":false}],\"text\":\"Federated Person Principal\"},\"system\":\"urn:oid:2.16.840.1.113883.3.13.6\",\"value\":\"URN:CERNER:IDENTITY-FEDERATION:REALM:2E882EFF-FA72-4882-ADC8-A685F7D2BFA6:PRINCIPAL:XYIWIE1234\"}],\"active\":true,\"name\":[{\"id\":\"CI-4342010-0\",\"use\":\"official\",\"text\":\"SMART, JOE\",\"family\":\"SMART\",\"given\":[\"JOE\"],\"period\":{\"start\":\"2016-06-22T21:06:59.000Z\"}}],\"telecom\":[{\"id\":\"CI-PH-2023942-0\",\"system\":\"phone\",\"value\":\"9139898765\",\"use\":\"home\",\"rank\":\"1\",\"period\":{\"start\":\"2017-06-27T21:47:16.000Z\"}},{\"id\":\"CI-PH-2023944-1\",\"system\":\"phone\",\"value\":\"9137876555\",\"use\":\"mobile\",\"rank\":\"1\",\"period\":{\"start\":\"2017-06-27T21:47:16.000Z\"}},{\"id\":\"CI-EM-2399940-0\",\"system\":\"email\",\"value\":\"kathy.pickering@cerner.com\",\"use\":\"home\",\"rank\":\"1\",\"period\":{\"start\":\"2018-09-13T16:43:28.000Z\"}}],\"gender\":\"male\",\"birthDate\":\"1976-04-29\",\"address\":[{\"id\":\"CI-1925899-0\",\"use\":\"home\",\"text\":\"1234 Blvd\\nOverland Park, KS 66213\\nUSA\",\"line\":[\"1234 Blvd\"],\"city\":\"Overland Park\",\"district\":\"Johnson\",\"state\":\"KS\",\"postalCode\":\"66213\",\"country\":\"USA\",\"period\":{\"start\":\"2017-06-27T21:47:16.000Z\"}}],\"maritalStatus\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/38\",\"code\":\"309237\",\"display\":\"Married\",\"userSelected\":true},{\"system\":\"http://terminology.hl7.org/CodeSystem/v3-MaritalStatus\",\"code\":\"M\",\"display\":\"Married\",\"userSelected\":false}],\"text\":\"Married\"},\"contact\":[{\"relationship\":[{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/351\",\"code\":\"36327661\",\"display\":\"Authorized Representative\",\"userSelected\":true}],\"text\":\"Authorized Representative\"}],\"name\":{\"id\":\"CI-4342009-0\",\"use\":\"official\",\"text\":\"SHANKAR, Ganesh Jayaraman\",\"family\":\"SHANKAR\",\"given\":[\"Ganesh\",\"Jayaraman\"],\"period\":{\"start\":\"2016-06-22T20:43:05.000Z\"}},\"telecom\":[{\"system\":\"phone\",\"value\":\"9035768555\",\"use\":\"home\",\"rank\":\"1\",\"period\":{\"start\":\"2019-09-18T20:48:19.000Z\"}},{\"system\":\"email\",\"value\":\"kathy.pickering@cerner.com\",\"use\":\"home\",\"rank\":\"1\",\"period\":{\"start\":\"2018-09-13T16:37:32.000Z\"}}],\"gender\":\"female\",\"period\":{\"start\":\"2017-06-09T13:47:35.000Z\",\"end\":\"2018-05-17T20:51:36.000Z\"}}],\"communication\":[{\"language\":{\"coding\":[{\"system\":\"https://fhir.cerner.com/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca/codeSet/36\",\"code\":\"151\",\"display\":\"English\",\"userSelected\":true},{\"system\":\"urn:ietf:bcp:47\",\"code\":\"en\",\"display\":\"English\",\"userSelected\":false}],\"text\":\"English\"},\"preferred\":true}],\"generalPractitioner\":[{\"id\":\"CI-6810257-15\",\"reference\":\"Practitioner/1912007\",\"display\":\"McCurdy, Michael\"}]}`\n          )\n        )\n      };\n    } else {\n      this.state = {\n        patient: null\n      };\n\n      SMART.ready()\n        .then(client => {\n          return Promise.all([\n            client.patient.read()\n            // client.request(`/MedicationRequest?patient=${client.patient.id}`, {\n            //     resolveReferences: \"medicationReference\",\n            //     pageLimit: 0,\n            //     flat: true\n            // })\n          ]);\n        })\n        .then(\n          ([patient, meds]) => {\n            console.log(\"patient\", patient);\n            console.log(\"meds\", meds);\n            this.updatePatient(this.getPatientDetails(patient));\n            //this.meds = meds;\n          },\n          error => {\n            console.error(error);\n          }\n        )\n        .catch(console.error);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar bg-dark text-light\">\n          <h4>React FHIR Test App</h4>\n        </div>\n        {this.state.patient && <PatientInfo patient={this.state.patient} />}\n        {!this.state.patient && (\n          <div>Waiting for information to load ... !</div>\n        )}\n      </div>\n    );\n  }\n\n  retreivePhone = ({ value, use }) => ({ Number: value, Type: use });\n  retreiveAddress = ({ use, line, city, state, postalCode, country }) => ({\n    Street1: line ? line[0] : \"\",\n    Street2: line ? line[1] : \"N/A\",\n    City: city,\n    State: state,\n    PostalCode: postalCode,\n    Country: country,\n    Type: use\n  });\n  retreiveContacts = ({ relationship, name, telecom, address }) => ({\n    Email: \"N/A\",\n    Name: name.text,\n    Phones: telecom ? telecom.map(this.retreivePhone) : \"N/A\",\n    RelationShip: relationship ? relationship[0].text : \"N/A\",\n    Address: address ? this.retreiveAddress(address) : \"N/A\"\n  });\n\n  getPatientDetails = patient => ({\n    Name: patient.name.find(v => v.use == \"official\").text,\n    Gender: patient.gender,\n    Addresses: patient.address.map(this.retreiveAddress),\n    Active: patient.active,\n    BirthDate: patient.birthDate,\n    Phone: patient.telecom.map(this.retreivePhone),\n    EmergencyContacts: patient.contact.map(this.retreiveContacts)\n  });\n\n  updatePatient(patient) {\n    this.setState({ patient: patient });\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport FHIR from 'fhirclient';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        console.log(FHIR);\r\n\r\n        FHIR.oauth2.authorize({\r\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a',\r\n            'scope':  'patient/Patient.read patient/MedicationRequest.read launch online_access openid profile'\r\n        });\r\n    } \r\n\r\n\r\n    render () {\r\n        return <div className=\"App\">\r\n                {window.location.href}\r\n                'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\r\n            </div>;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Launch from './components/Launch';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst params = Object.fromEntries(window.location.href.replace(/.*\\?/, \"\").split(\"&\").map(v => v.split(\"=\")));\nconst launchContext = () => window.location.href.replace(/.*\\?/, \"\").split(\"&\").filter(v => v.split(\"=\")[0] == \"iss\").length > 0;\n\nReactDOM.render(launchContext() ? <Launch  /> : <App smartKey={params.state ? params.state : null}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}