{"version":3,"sources":["App.js","components/Launch.js","serviceWorker.js","index.js"],"names":["App","props","smartKey","console","log","SMART","ready","then","client","Promise","all","patient","read","request","id","resolveReferences","pageLimit","flat","meds","error","catch","className","window","location","href","JSON","stringify","this","React","Component","FHIR","oauth2","authorize","Boolean","hostname","match","params","Object","fromEntries","replace","split","map","v","ReactDOM","render","filter","length","Launch","state","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"oPA2DeA,E,YA9Cb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,SAAWD,EAAMC,SAEtBC,QAAQC,IAAI,QAASH,GACrBE,QAAQC,IAAI,QAASC,UAKrBA,SAAMC,QACLC,MAAK,SAAAC,GAGJ,OADAL,QAAQC,IAAII,GACLC,QAAQC,IAAI,CACjBF,EAAOG,QAAQC,OACfJ,EAAOK,QAAP,qCAA6CL,EAAOG,QAAQG,IAAM,CAC9DC,kBAAmB,sBACnBC,UAAW,EACXC,MAAM,SAIbV,MAAK,YAAsB,IAAD,mBAAnBI,EAAmB,KAAVO,EAAU,KACvBf,QAAQC,IAAI,UAAWO,GACvBR,QAAQC,IAAI,OAAQc,GACpB,EAAKP,QAAUA,EACf,EAAKO,KAAOA,KAEd,SAAAC,GACEhB,QAAQgB,MAAMA,MAEjBC,MAAMjB,QAAQgB,OAjCG,E,sEAqClB,OAAO,yBAAKE,UAAU,OAAf,qBAEEC,OAAOC,SAASC,KAFlB,sDAIEC,KAAKC,UAAUC,KAAKhB,c,GAlDfiB,IAAMC,WCsBT7B,E,YApBX,WAAaC,GAAQ,IAAD,6BAChB,4CAAMA,IAENE,QAAQC,IAAI0B,KAEZA,IAAKC,OAAOC,UAAU,CAClB,UAAa,uCACb,MAAU,4FAPE,E,sEAahB,OAAO,yBAAKX,UAAU,OACbC,OAAOC,SAASC,KADlB,2D,GAhBGI,IAAMC,WCSJI,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCVN,IAAMC,EAASC,OAAOC,YAAYhB,OAAOC,SAASC,KAAKe,QAAQ,OAAQ,IAAIC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,SAGvGG,IAASC,OAFmBtB,OAAOC,SAASC,KAAKe,QAAQ,OAAQ,IAAIC,MAAM,KAAKK,QAAO,SAAAH,GAAC,MAAuB,OAAnBA,EAAEF,MAAM,KAAK,MAAaM,OAAS,EAE7F,kBAACC,EAAD,MAAc,kBAAC,EAAD,CAAK7C,SAAUkC,EAAOY,QAAUC,SAASC,eAAe,SDwHlG,kBAAmBC,WACrBA,UAAUC,cAAc9C,MAAMC,MAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.fa070fdd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { oauth2 as SMART } from 'fhirclient';\n\nclass App extends React.Component {\n\n  smartKey;\n  // _storageData = null;\n  // get StorageData() {\n  //   this._storageData = this._storageData == null ? JSON.parse(sessionStorage[this.smartKey]) : this._storageData;\n  //   return this._storageData;\n  // }\n\n  constructor (props) {\n    super(props);\n\n    this.smartKey = props.smartKey;\n\n    console.log(\"props\", props);\n    console.log(\"smart\", SMART);\n    // console.log(\"storage\", sessionStorage);\n    // console.log(\"storage\", this.StorageData);\n    // console.log(\"smartKey\", this.smartKey);\n\n    SMART.ready()\n    .then(client => {\n\n      console.log(client);\n      return Promise.all([\n        client.patient.read(),\n        client.request(`/MedicationRequest?patient=${client.patient.id}`, {\n            resolveReferences: \"medicationReference\",\n            pageLimit: 0,\n            flat: true\n        })\n      ]);\n    })\n    .then(([patient, meds]) => {\n        console.log(\"patient\", patient);\n        console.log(\"meds\", meds);\n        this.patient = patient;\n        this.meds = meds;\n      },\n      error => {\n        console.error(error);\n    })\n    .catch(console.error);\n  } \n\n  render () {\n    return <div className=\"App\">\n            Redirected to here\n            {window.location.href}\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\n            {JSON.stringify(this.patient)}\n          </div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport FHIR from 'fhirclient';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        console.log(FHIR);\r\n\r\n        FHIR.oauth2.authorize({\r\n            'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a',\r\n            'scope':  'patient/Patient.read patient/MedicationRequest.read launch online_access openid profile'\r\n        });\r\n    } \r\n\r\n\r\n    render () {\r\n        return <div className=\"App\">\r\n                {window.location.href}\r\n                'client_id': 'ba2b34f9-2f17-4858-b5f9-6a5b3312e26a'\r\n            </div>;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Launch from './components/Launch';\nimport * as serviceWorker from './serviceWorker';\nimport { oauth2 as SMART } from \"fhirclient\";\n\nconst params = Object.fromEntries(window.location.href.replace(/.*\\?/, \"\").split(\"&\").map(v => v.split(\"=\")));\nconst launchContext = () => window.location.href.replace(/.*\\?/, \"\").split(\"&\").filter(v => v.split(\"=\")[0] == \"iss\").length > 0;\n\nReactDOM.render(launchContext() ? <Launch  /> : <App smartKey={params.state}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}